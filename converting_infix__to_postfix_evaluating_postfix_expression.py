# -*- coding: utf-8 -*-
"""converting_infix _to_postfix_evaluating_postfix_expression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lonHTzp9QCoPPdXAkcHLOf7Fsh3OrJZn
"""

def is_operator(char):
    return char in {'+', '-', '*', '/'}

def precedence(operator):
    if operator == '+' or operator == '-':
        return 1
    elif operator == '*' or operator == '/':
        return 2
    else:
        return 0

def infix_to_postfix(infix_expression):
    stack = []
    postfix_expression = []

    for char in infix_expression:
        if char.isalnum():
            # If the character is an operand, add it to the postfix expression
            postfix_expression.append(char)
        elif char == '(':
            # If the character is an open parenthesis, push it onto the stack
            stack.append(char)
        elif char == ')':
            # If the character is a closing parenthesis, pop operators from the stack
            # and append them to the postfix expression until an open parenthesis is encountered
            while stack and stack[-1] != '(':
                postfix_expression.append(stack.pop())
            stack.pop()  # Pop the open parenthesis from the stack
        elif is_operator(char):
            # If the character is an operator, pop operators from the stack and append
            # them to the postfix expression until the stack is empty or an operator with
            # lower precedence is encountered
            while stack and precedence(stack[-1]) >= precedence(char):
                postfix_expression.append(stack.pop())
            stack.append(char)

    # Pop any remaining operators from the stack and append them to the postfix expression
    while stack:
        postfix_expression.append(stack.pop())

    return ''.join(postfix_expression)

# Example usage:
infix_expression = "(a+b)*c+d"
postfix_expression = infix_to_postfix(infix_expression)
print("Infix Expression:", infix_expression)
print("Postfix Expression:", postfix_expression)

def is_operand(char):
    return char.isalnum()

def evaluate_postfix(postfix_expression):
    stack = []

    for char in postfix_expression:
        if is_operand(char):
            # If the character is an operand, push it onto the stack
            stack.append(float(char))
        else:
            # If the character is an operator, pop two operands from the stack,
            # perform the operation, and push the result back onto the stack
            operand2 = stack.pop()
            operand1 = stack.pop()

            if char == '+':
                result = operand1 + operand2
            elif char == '-':
                result = operand1 - operand2
            elif char == '*':
                result = operand1 * operand2
            elif char == '/':
                result = operand1 / operand2

            stack.append(result)

    # The final result is on top of the stack
    return stack.pop()

# Example usage:
postfix_expression = "1020*5+"
result = evaluate_postfix(postfix_expression)
print("Postfix Expression:", postfix_expression)
print("Result:", result)